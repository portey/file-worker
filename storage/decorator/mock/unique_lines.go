// Code generated by MockGen. DO NOT EDIT.
// Source: storage/decorator/unique_lines.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	time "time"
)

// MockDecorated is a mock of Decorated interface
type MockDecorated struct {
	ctrl     *gomock.Controller
	recorder *MockDecoratedMockRecorder
}

// MockDecoratedMockRecorder is the mock recorder for MockDecorated
type MockDecoratedMockRecorder struct {
	mock *MockDecorated
}

// NewMockDecorated creates a new mock instance
func NewMockDecorated(ctrl *gomock.Controller) *MockDecorated {
	mock := &MockDecorated{ctrl: ctrl}
	mock.recorder = &MockDecoratedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDecorated) EXPECT() *MockDecoratedMockRecorder {
	return m.recorder
}

// PutFile mocks base method
func (m *MockDecorated) PutFile(ctx context.Context, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFile", ctx, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutFile indicates an expected call of PutFile
func (mr *MockDecoratedMockRecorder) PutFile(ctx, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFile", reflect.TypeOf((*MockDecorated)(nil).PutFile), ctx, content)
}

// GetFile mocks base method
func (m *MockDecorated) GetFile(ctx context.Context, cb func(string, time.Time, io.ReadSeeker) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFile indicates an expected call of GetFile
func (mr *MockDecoratedMockRecorder) GetFile(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockDecorated)(nil).GetFile), ctx, cb)
}
